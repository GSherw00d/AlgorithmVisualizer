{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\geoff\\\\Desktop\\\\AlgorithmVisualizer\\\\AlgorithmVisualizer\\\\myapp\\\\src\\\\components\\\\SelectionBar.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass SelectionBar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClickWall = () => {\n      this.props.wallActive();\n      console.log(this.props.isActive);\n    };\n\n    this.handleClickSFNode = () => {\n      this.props.sfNodeActive();\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"Wall\",\n      onClick: this.handleClickWall,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"Wall\"), React.createElement(\"button\", {\n      className: \"StartFinNode\",\n      onClick: this.handleClickSFNode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \" \", \"SFNode\"), React.createElement(\"button\", {\n      className: \"Algorithm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Algorithm\"), React.createElement(\"button\", {\n      className: \"Start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Start\"));\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    isActive: state.isActive\n  };\n}; //Want to see which of the isActives are toggled\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    wallActive: () => dispatch({\n      type: \"WALL_STATUS_CHANGE\" //Not sure if this is the right way of doing things\n\n    }),\n    sfNodeActive: () => dispatch({\n      type: \"START_FINISH_NODE\"\n    })\n  };\n};\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(SelectionBar);","map":{"version":3,"sources":["C:/Users/geoff/Desktop/AlgorithmVisualizer/AlgorithmVisualizer/myapp/src/components/SelectionBar.js"],"names":["React","Component","connect","SelectionBar","handleClickWall","props","wallActive","console","log","isActive","handleClickSFNode","sfNodeActive","render","mapStatetoProps","state","mapDispatchToProps","dispatch","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,YAAN,SAA2BF,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SACnCG,eADmC,GACjB,MAAM;AACtB,WAAKC,KAAL,CAAWC,UAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWI,QAAvB;AACD,KAJkC;;AAAA,SAMnCC,iBANmC,GAMf,MAAM;AACxB,WAAKL,KAAL,CAAWM,YAAX;AACD,KARkC;AAAA;;AAUnCC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,MAAlB;AAAyB,MAAA,OAAO,EAAE,KAAKR,eAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAIE;AAAQ,MAAA,SAAS,EAAC,cAAlB;AAAiC,MAAA,OAAO,EAAE,KAAKM,iBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,WAJF,EAQE;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBARF,EASE;AAAQ,MAAA,SAAS,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eATF,CADF;AAaD;;AAxBkC;;AA2BrC,MAAMG,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLL,IAAAA,QAAQ,EAAEK,KAAK,CAACL;AADX,GAAP;AAGD,CAJD,C,CAMA;;;AACA,MAAMM,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLV,IAAAA,UAAU,EAAE,MACVU,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE,oBADC,CACoB;;AADpB,KAAD,CAFL;AAKLN,IAAAA,YAAY,EAAE,MACZK,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE;AADC,KAAD;AANL,GAAP;AAUD,CAXD;;AAaA,eAAef,OAAO,CAACW,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CZ,YAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass SelectionBar extends Component {\r\n  handleClickWall = () => {\r\n    this.props.wallActive();\r\n    console.log(this.props.isActive);\r\n  };\r\n\r\n  handleClickSFNode = () => {\r\n    this.props.sfNodeActive();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button className=\"Wall\" onClick={this.handleClickWall}>\r\n          Wall\r\n        </button>\r\n        <button className=\"StartFinNode\" onClick={this.handleClickSFNode}>\r\n          {\" \"}\r\n          SFNode\r\n        </button>\r\n        <button className=\"Algorithm\">Algorithm</button>\r\n        <button className=\"Start\">Start</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = state => {\r\n  return {\r\n    isActive: state.isActive\r\n  };\r\n};\r\n\r\n//Want to see which of the isActives are toggled\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    wallActive: () =>\r\n      dispatch({\r\n        type: \"WALL_STATUS_CHANGE\" //Not sure if this is the right way of doing things\r\n      }),\r\n    sfNodeActive: () =>\r\n      dispatch({\r\n        type: \"START_FINISH_NODE\"\r\n      })\r\n  };\r\n};\r\n\r\nexport default connect(mapStatetoProps, mapDispatchToProps)(SelectionBar);\r\n"]},"metadata":{},"sourceType":"module"}