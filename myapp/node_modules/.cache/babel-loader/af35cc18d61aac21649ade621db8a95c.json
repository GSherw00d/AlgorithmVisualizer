{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\geoff\\\\Desktop\\\\AlgorithmVisualizer\\\\AlgorithmVisualizer\\\\myapp\\\\src\\\\components\\\\NodePlace.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport style from \"./Grid.module.css\";\nimport \"./Grid.css\";\nimport ReactDOM from \"react-dom\";\n\nclass Node extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleMouseDown = () => {\n      this.props.typeChange(this.props.id);\n    };\n\n    this.mouseDragOver = e => {\n      if (e.buttons === 1 || e.buttons === 3) {\n        this.handleMouseDown();\n      }\n    };\n  }\n\n  componentDidMount() {\n    ReactDOM.findDOMNode(this).addEventListener(\"mouseover\", this.mouseDragOver);\n  }\n\n  render() {\n    let type = this.props.nodes.type;\n    return React.createElement(\"div\", {\n      className: style.element + \" \" + type //this.props.nodes.type}\n      ,\n      onMouseDown: this.handleMouseDown,\n      id: style.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStatetoProps = (state, ownProps) => {\n  let id = ownProps.id; //returning just the element of the array we want for this node\n\n  return {\n    nodes: state.nodes.find(node => node.id === id)\n  };\n}; //figure out which of the buttons is pressed to send an action\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    typeChange: id => dispatch({\n      type: \"TYPE_CHANGE\",\n      id\n    })\n  };\n};\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(Node);","map":{"version":3,"sources":["C:/Users/geoff/Desktop/AlgorithmVisualizer/AlgorithmVisualizer/myapp/src/components/NodePlace.js"],"names":["React","Component","connect","style","ReactDOM","Node","handleMouseDown","props","typeChange","id","mouseDragOver","e","buttons","componentDidMount","findDOMNode","addEventListener","render","type","nodes","element","mapStatetoProps","state","ownProps","find","node","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAO,YAAP;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAAA;AAAA;;AAAA,SAC3BK,eAD2B,GACT,MAAM;AACtB,WAAKC,KAAL,CAAWC,UAAX,CAAsB,KAAKD,KAAL,CAAWE,EAAjC;AACD,KAH0B;;AAAA,SAY3BC,aAZ2B,GAYXC,CAAC,IAAI;AACnB,UAAIA,CAAC,CAACC,OAAF,KAAc,CAAd,IAAmBD,CAAC,CAACC,OAAF,KAAc,CAArC,EAAwC;AACtC,aAAKN,eAAL;AACD;AACF,KAhB0B;AAAA;;AAK3BO,EAAAA,iBAAiB,GAAG;AAClBT,IAAAA,QAAQ,CAACU,WAAT,CAAqB,IAArB,EAA2BC,gBAA3B,CACE,WADF,EAEE,KAAKL,aAFP;AAID;;AAQDM,EAAAA,MAAM,GAAG;AACP,QAAIC,IAAI,GAAG,KAAKV,KAAL,CAAWW,KAAX,CAAiBD,IAA5B;AACA,WACE;AACE,MAAA,SAAS,EAAEd,KAAK,CAACgB,OAAN,GAAgB,GAAhB,GAAsBF,IADnC,CACyC;AADzC;AAEE,MAAA,WAAW,EAAE,KAAKX,eAFpB;AAGE,MAAA,EAAE,EAAEH,KAAK,CAACc,IAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AA3B0B;;AA8B7B,MAAMG,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,MAAIb,EAAE,GAAGa,QAAQ,CAACb,EAAlB,CAD2C,CAE3C;;AACA,SAAO;AACLS,IAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYK,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACf,EAAL,KAAYA,EAArC;AADF,GAAP;AAGD,CAND,C,CAQA;;;AACA,MAAMgB,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLlB,IAAAA,UAAU,EAAEC,EAAE,IACZiB,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAE,aADC;AAEPR,MAAAA;AAFO,KAAD;AAFL,GAAP;AAOD,CARD;;AAUA,eAAeP,OAAO,CAACkB,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CpB,IAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport style from \"./Grid.module.css\";\r\nimport \"./Grid.css\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass Node extends Component {\r\n  handleMouseDown = () => {\r\n    this.props.typeChange(this.props.id);\r\n  };\r\n\r\n  componentDidMount() {\r\n    ReactDOM.findDOMNode(this).addEventListener(\r\n      \"mouseover\",\r\n      this.mouseDragOver\r\n    );\r\n  }\r\n\r\n  mouseDragOver = e => {\r\n    if (e.buttons === 1 || e.buttons === 3) {\r\n      this.handleMouseDown();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let type = this.props.nodes.type;\r\n    return (\r\n      <div\r\n        className={style.element + \" \" + type} //this.props.nodes.type}\r\n        onMouseDown={this.handleMouseDown}\r\n        id={style.type}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = (state, ownProps) => {\r\n  let id = ownProps.id;\r\n  //returning just the element of the array we want for this node\r\n  return {\r\n    nodes: state.nodes.find(node => node.id === id)\r\n  };\r\n};\r\n\r\n//figure out which of the buttons is pressed to send an action\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    typeChange: id =>\r\n      dispatch({\r\n        type: \"TYPE_CHANGE\",\r\n        id\r\n      })\r\n  };\r\n};\r\n\r\nexport default connect(mapStatetoProps, mapDispatchToProps)(Node);\r\n"]},"metadata":{},"sourceType":"module"}