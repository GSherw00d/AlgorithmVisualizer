{"ast":null,"code":"function makeNodeArray(rows, columns) {\n  let initNode = [];\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      initNode.push({\n        id: i + \"_\" + j,\n        type: \"EMPTY\",\n        callingnode: \"\"\n      });\n    }\n  }\n\n  return initNode;\n}\n\nconst initState = {\n  nodes: makeNodeArray(15, 20),\n  isActive: {\n    wall: false,\n    startFinNode: false,\n    algorithm: \"Null\",\n    start: false\n  }\n};\n\nconst rootReducer = (state = initState, action) => {\n  console.log(action);\n\n  if (action.type === \"WALL_STATUS_CHANGE\") {\n    let newWall = state.isActive.wall ? false : true;\n    return { ...state,\n      isActive: { ...state.isActive,\n        wall: newWall\n      }\n    };\n  } else if (action.type === \"TYPE_CHANGE\") {\n    console.log(action.id);\n  } else {\n    return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/geoff/Desktop/AlgorithmVisualizer/AlgorithmVisualizer/myapp/src/reducers/rootReducer.js"],"names":["makeNodeArray","rows","columns","initNode","i","j","push","id","type","callingnode","initState","nodes","isActive","wall","startFinNode","algorithm","start","rootReducer","state","action","console","log","newWall"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AACpC,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;AAC7B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAApB,EAA6BG,CAAC,EAA9B,EAAkC;AAChCF,MAAAA,QAAQ,CAACG,IAAT,CAAc;AAAEC,QAAAA,EAAE,EAAEH,CAAC,GAAG,GAAJ,GAAUC,CAAhB;AAAmBG,QAAAA,IAAI,EAAE,OAAzB;AAAkCC,QAAAA,WAAW,EAAE;AAA/C,OAAd;AACD;AACF;;AACD,SAAON,QAAP;AACD;;AAED,MAAMO,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAEX,aAAa,CAAC,EAAD,EAAK,EAAL,CADJ;AAEhBY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE,KADE;AAERC,IAAAA,YAAY,EAAE,KAFN;AAGRC,IAAAA,SAAS,EAAE,MAHH;AAIRC,IAAAA,KAAK,EAAE;AAJC;AAFM,CAAlB;;AAUA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGR,SAAT,EAAoBS,MAApB,KAA+B;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,MAAIA,MAAM,CAACX,IAAP,KAAgB,oBAApB,EAA0C;AACxC,QAAIc,OAAO,GAAGJ,KAAK,CAACN,QAAN,CAAeC,IAAf,GAAsB,KAAtB,GAA8B,IAA5C;AACA,WAAO,EACL,GAAGK,KADE;AAELN,MAAAA,QAAQ,EAAE,EAAE,GAAGM,KAAK,CAACN,QAAX;AAAqBC,QAAAA,IAAI,EAAES;AAA3B;AAFL,KAAP;AAID,GAND,MAMO,IAAIH,MAAM,CAACX,IAAP,KAAgB,aAApB,EAAmC;AACxCY,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACZ,EAAnB;AACD,GAFM,MAEA;AACL,WAAOW,KAAP;AACD;AACF,CAbD;;AAeA,eAAeD,WAAf","sourcesContent":["function makeNodeArray(rows, columns) {\r\n  let initNode = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    for (let j = 0; j < columns; j++) {\r\n      initNode.push({ id: i + \"_\" + j, type: \"EMPTY\", callingnode: \"\" });\r\n    }\r\n  }\r\n  return initNode;\r\n}\r\n\r\nconst initState = {\r\n  nodes: makeNodeArray(15, 20),\r\n  isActive: {\r\n    wall: false,\r\n    startFinNode: false,\r\n    algorithm: \"Null\",\r\n    start: false\r\n  }\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n  console.log(action);\r\n  if (action.type === \"WALL_STATUS_CHANGE\") {\r\n    let newWall = state.isActive.wall ? false : true;\r\n    return {\r\n      ...state,\r\n      isActive: { ...state.isActive, wall: newWall }\r\n    };\r\n  } else if (action.type === \"TYPE_CHANGE\") {\r\n    console.log(action.id);\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}